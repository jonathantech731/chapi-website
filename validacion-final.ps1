# üéØ VALIDACI√ìN FINAL DEL PROYECTO
# Script para confirmar que todos los errores han sido reparados

Write-Host "üîç EJECUTANDO VALIDACI√ìN FINAL..." -ForegroundColor Green
Write-Host "=" * 50

# Funci√≥n para verificar archivos
function Test-FileContent {
  param($FilePath, $Description)

  if (Test-Path $FilePath) {
    $content = Get-Content $FilePath -Raw -ErrorAction SilentlyContinue

    # Verificar conflictos de merge
    if ($content -match "<<<<<<|======|>>>>>>") {
      Write-Host "‚ùå $Description - Conflictos de merge detectados" -ForegroundColor Red
      return $false
    }

    # Verificar contenido v√°lido
    if ($content.Length -gt 100) {
      Write-Host "‚úÖ $Description - Archivo v√°lido" -ForegroundColor Green
      return $true
    }
    else {
      Write-Host "‚ö†Ô∏è  $Description - Archivo muy peque√±o" -ForegroundColor Yellow
      return $false
    }
  }
  else {
    Write-Host "‚ùå $Description - Archivo no encontrado" -ForegroundColor Red
    return $false
  }
}

# 1. Verificar archivos principales
Write-Host "`nüìÅ VERIFICANDO ARCHIVOS PRINCIPALES..." -ForegroundColor Yellow

$mainFiles = @{
  "README_COMERCIAL.md"                          = "Documentaci√≥n comercial"
  "test-chapi-ultra-comercial.html"              = "P√°gina de testing"
  "assets\js\chapi-assistant.js"                 = "Asistente principal"
  "assets\js\chapi-config-ultra-comercial.js"    = "Configuraci√≥n comercial"
  "assets\js\chapi-assistant-ultra-comercial.js" = "Asistente comercial"
  "package.json"                                 = "Configuraci√≥n del proyecto"
}

$validFiles = 0
$totalFiles = $mainFiles.Count

foreach ($file in $mainFiles.GetEnumerator()) {
  if (Test-FileContent -FilePath $file.Key -Description $file.Value) {
    $validFiles++
  }
}

# 2. Verificar scripts de npm
Write-Host "`nüì¶ VERIFICANDO SCRIPTS DE NPM..." -ForegroundColor Yellow

if (Test-Path "package.json") {
  $packageJson = Get-Content "package.json" | ConvertFrom-Json -ErrorAction SilentlyContinue

  if ($packageJson.scripts.comercial) {
    Write-Host "‚úÖ Script 'comercial' configurado" -ForegroundColor Green
  }
  else {
    Write-Host "‚ùå Script 'comercial' faltante" -ForegroundColor Red
  }

  if ($packageJson.scripts."test-comercial") {
    Write-Host "‚úÖ Script 'test-comercial' configurado" -ForegroundColor Green
  }
  else {
    Write-Host "‚ùå Script 'test-comercial' faltante" -ForegroundColor Red
  }
}
else {
  Write-Host "‚ùå package.json no encontrado" -ForegroundColor Red
}

# 3. Verificar sintaxis de archivos JS
Write-Host "`nüîß VERIFICANDO SINTAXIS JAVASCRIPT..." -ForegroundColor Yellow

$jsFiles = @(
  "assets\js\chapi-assistant.js",
  "assets\js\chapi-config-ultra-comercial.js",
  "assets\js\chapi-assistant-ultra-comercial.js"
)

$validJsFiles = 0
foreach ($jsFile in $jsFiles) {
  if (Test-Path $jsFile) {
    $jsContent = Get-Content $jsFile -Raw

    # Verificaciones b√°sicas de sintaxis
    $hasConflicts = $jsContent -match "<<<<<<|======|>>>>>>"
    $hasBasicStructure = $jsContent -match "(function|class|const|let|var)"
    $hasClosingBraces = ($jsContent -split "\{").Length -eq ($jsContent -split "\}").Length

    if (-not $hasConflicts -and $hasBasicStructure) {
      Write-Host "‚úÖ $jsFile - Sintaxis correcta" -ForegroundColor Green
      $validJsFiles++
    }
    else {
      Write-Host "‚ùå $jsFile - Problemas de sintaxis" -ForegroundColor Red
    }
  }
  else {
    Write-Host "‚ùå $jsFile - No encontrado" -ForegroundColor Red
  }
}

# 4. Test de conectividad de puertos
Write-Host "`nüåê VERIFICANDO PUERTOS DISPONIBLES..." -ForegroundColor Yellow

$testPorts = @(3000, 3003, 8000)
$availablePorts = 0

foreach ($port in $testPorts) {
  try {
    $tcp = New-Object System.Net.Sockets.TcpClient
    $connection = $tcp.BeginConnect("localhost", $port, $null, $null)
    $wait = $connection.AsyncWaitHandle.WaitOne(1000, $false)

    if ($tcp.Connected) {
      Write-Host "‚ö†Ô∏è  Puerto $port en uso" -ForegroundColor Yellow
    }
    else {
      Write-Host "‚úÖ Puerto $port disponible" -ForegroundColor Green
      $availablePorts++
    }
    $tcp.Close()
  }
  catch {
    Write-Host "‚úÖ Puerto $port disponible" -ForegroundColor Green
    $availablePorts++
  }
}

# 5. Calcular score final
Write-Host "`nüìä RESUMEN DE VALIDACI√ìN" -ForegroundColor Cyan
Write-Host "=" * 50

$fileScore = [math]::Round(($validFiles / $totalFiles) * 100, 0)
$jsScore = [math]::Round(($validJsFiles / $jsFiles.Count) * 100, 0)
$portScore = [math]::Round(($availablePorts / $testPorts.Count) * 100, 0)
$overallScore = [math]::Round(($fileScore + $jsScore + $portScore) / 3, 0)

Write-Host "üìÅ Archivos principales: $fileScore% ($validFiles/$totalFiles)" -ForegroundColor $(if ($fileScore -ge 80) { "Green" }elseif ($fileScore -ge 60) { "Yellow" }else { "Red" })
Write-Host "üîß Archivos JavaScript: $jsScore% ($validJsFiles/$($jsFiles.Count))" -ForegroundColor $(if ($jsScore -ge 80) { "Green" }elseif ($jsScore -ge 60) { "Yellow" }else { "Red" })
Write-Host "üåê Puertos disponibles: $portScore% ($availablePorts/$($testPorts.Count))" -ForegroundColor $(if ($portScore -ge 80) { "Green" }elseif ($portScore -ge 60) { "Yellow" }else { "Red" })

Write-Host "`nüéØ SCORE GENERAL: $overallScore%" -ForegroundColor $(if ($overallScore -ge 90) { "Green" }elseif ($overallScore -ge 70) { "Yellow" }else { "Red" })

# 6. Recomendaciones finales
Write-Host "`nüí° RECOMENDACIONES:" -ForegroundColor Cyan

if ($overallScore -ge 90) {
  Write-Host "üü¢ PROYECTO COMPLETAMENTE FUNCIONAL" -ForegroundColor Green
  Write-Host "‚Ä¢ Ejecutar: npm run comercial" -ForegroundColor White
  Write-Host "‚Ä¢ URL de testing: http://localhost:3000/test-chapi-ultra-comercial.html" -ForegroundColor White
}
elseif ($overallScore -ge 70) {
  Write-Host "üü° PROYECTO FUNCIONAL CON ADVERTENCIAS" -ForegroundColor Yellow
  Write-Host "‚Ä¢ Revisar archivos faltantes o con errores" -ForegroundColor White
  Write-Host "‚Ä¢ Ejecutar: npm install" -ForegroundColor White
}
else {
  Write-Host "üî¥ PROYECTO REQUIERE REPARACI√ìN" -ForegroundColor Red
  Write-Host "‚Ä¢ Verificar archivos cr√≠ticos faltantes" -ForegroundColor White
  Write-Host "‚Ä¢ Revisar errores de sintaxis en JS" -ForegroundColor White
}

Write-Host "`nüöÄ COMANDOS R√ÅPIDOS:" -ForegroundColor Cyan
Write-Host "‚Ä¢ Inicio comercial:   npm run comercial" -ForegroundColor White
Write-Host "‚Ä¢ Solo testing:       npm run test-comercial" -ForegroundColor White
Write-Host "‚Ä¢ Diagn√≥stico:        .\diagnostico-completo.ps1" -ForegroundColor White

Write-Host "`n‚úÖ VALIDACI√ìN COMPLETADA" -ForegroundColor Green
