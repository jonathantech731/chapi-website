# üîß REPARACI√ìN COMPLETA DE ERRORES
# Script para identificar y corregir todos los problemas del proyecto

Write-Host "üöÄ INICIANDO REPARACI√ìN COMPLETA..." -ForegroundColor Green
Write-Host "=" * 60

# 1. Verificar archivos con problemas comunes
Write-Host "`nüìù VERIFICANDO ARCHIVOS MARKDOWN..." -ForegroundColor Yellow

$markdownFiles = Get-ChildItem -Path . -Recurse -Filter "*.md"
$problematicFiles = @()

foreach ($file in $markdownFiles) {
    Write-Host "Revisando: $($file.Name)" -ForegroundColor Cyan

    $content = Get-Content $file.FullName -Raw -ErrorAction SilentlyContinue
    if ($content) {
        # Verificar problemas comunes
        $issues = @()

        # 1. L√≠neas duplicadas al inicio
        if ($content -match "^.*npm run.*\n.*npm run.*\n.*npm start.*#") {
            $issues += "C√≥digo duplicado al inicio"
        }

        # 2. Merge conflict markers
        if ($content -match "<<<<<<|======|>>>>>>") {
            $issues += "Marcadores de conflicto"
        }

        # 3. Espacios incorrectos en encabezados
        if ($content -match "\n##[^#\s]") {
            $issues += "Espacios faltantes en encabezados"
        }

        # 4. URLs desnudas
        if ($content -match "http[s]?://[^\s\[\(]+(?!\)|\])") {
            $issues += "URLs sin formato"
        }

        if ($issues.Count -gt 0) {
            Write-Host "  ‚ùå Problemas encontrados: $($issues -join ', ')" -ForegroundColor Red
            $problematicFiles += $file
        } else {
            Write-Host "  ‚úÖ Sin problemas" -ForegroundColor Green
        }
    }
}

# 2. Verificar archivos JavaScript
Write-Host "`nüîß VERIFICANDO ARCHIVOS JAVASCRIPT..." -ForegroundColor Yellow

$jsFiles = Get-ChildItem -Path "assets\js" -Filter "*.js" -ErrorAction SilentlyContinue
if ($jsFiles) {
    foreach ($jsFile in $jsFiles) {
        $jsContent = Get-Content $jsFile.FullName -Raw -ErrorAction SilentlyContinue
        if ($jsContent) {
            if ($jsContent -match "<<<<<<|======|>>>>>>") {
                Write-Host "  ‚ùå $($jsFile.Name): Conflictos de merge" -ForegroundColor Red
            } else {
                Write-Host "  ‚úÖ $($jsFile.Name): Sin problemas" -ForegroundColor Green
            }
        }
    }
} else {
    Write-Host "  ‚ö†Ô∏è  Carpeta assets\js no encontrada" -ForegroundColor Yellow
}

# 3. Verificar archivos HTML
Write-Host "`nüåê VERIFICANDO ARCHIVOS HTML..." -ForegroundColor Yellow

$htmlFiles = Get-ChildItem -Path . -Filter "*.html"
foreach ($htmlFile in $htmlFiles) {
    $htmlContent = Get-Content $htmlFile.FullName -Raw -ErrorAction SilentlyContinue
    if ($htmlContent) {
        if ($htmlContent -match "<<<<<<|======|>>>>>>") {
            Write-Host "  ‚ùå $($htmlFile.Name): Conflictos de merge" -ForegroundColor Red
        } else {
            Write-Host "  ‚úÖ $($htmlFile.Name): Sin problemas" -ForegroundColor Green
        }
    }
}

# 4. Limpiar archivos temporales y problem√°ticos
Write-Host "`nüßπ LIMPIANDO ARCHIVOS PROBLEM√ÅTICOS..." -ForegroundColor Yellow

$filesToClean = @(
    "*.tmp",
    "*.bak",
    "*~",
    ".DS_Store",
    "Thumbs.db"
)

foreach ($pattern in $filesToClean) {
    $files = Get-ChildItem -Path . -Recurse -Filter $pattern -ErrorAction SilentlyContinue
    if ($files) {
        foreach ($file in $files) {
            Remove-Item $file.FullName -Force
            Write-Host "  üóëÔ∏è  Eliminado: $($file.Name)" -ForegroundColor Yellow
        }
    }
}

# 5. Verificar estructura de proyecto
Write-Host "`nüìÅ VERIFICANDO ESTRUCTURA DEL PROYECTO..." -ForegroundColor Yellow

$requiredStructure = @{
    "index.html" = "P√°gina principal"
    "test-chapi-ultra-comercial.html" = "P√°gina de testing comercial"
    "assets\js\chapi-assistant.js" = "Asistente principal"
    "assets\js\chapi-config-ultra-comercial.js" = "Configuraci√≥n comercial"
    "assets\js\chapi-assistant-ultra-comercial.js" = "Asistente comercial"
    "assets\css\chapi-assistant-pro.css" = "Estilos comerciales"
    "package.json" = "Configuraci√≥n del proyecto"
}

$missingFiles = @()
foreach ($file in $requiredStructure.GetEnumerator()) {
    if (Test-Path $file.Key) {
        Write-Host "  ‚úÖ $($file.Key) - $($file.Value)" -ForegroundColor Green
    } else {
        Write-Host "  ‚ùå $($file.Key) - $($file.Value) [FALTANTE]" -ForegroundColor Red
        $missingFiles += $file.Key
    }
}

# 6. Verificar configuraci√≥n de Git
Write-Host "`nüîÑ CONFIGURANDO GIT..." -ForegroundColor Yellow

if (-not (Test-Path ".git")) {
    git init
    Write-Host "  üÜï Repositorio Git inicializado" -ForegroundColor Green
}

# Crear .gitignore si no existe
if (-not (Test-Path ".gitignore")) {
    $gitignoreContent = @"
# Node modules
node_modules/
npm-debug.log*

# OS generated files
.DS_Store
Thumbs.db

# IDE files
.vscode/
.idea/

# Temporary files
*.tmp
*.bak
*~

# Environment files
.env
.env.local

# Build outputs
dist/
build/

# Logs
*.log
"@
    Set-Content -Path ".gitignore" -Value $gitignoreContent
    Write-Host "  üìù .gitignore creado" -ForegroundColor Green
}

# 7. Ejecutar comandos de reparaci√≥n autom√°tica
Write-Host "`nüîß EJECUTANDO REPARACIONES AUTOM√ÅTICAS..." -ForegroundColor Yellow

# Instalar dependencias si faltan
if (-not (Test-Path "node_modules")) {
    Write-Host "  üì¶ Instalando dependencias de Node.js..." -ForegroundColor Cyan
    npm install --silent
}

# 8. Resumen final
Write-Host "`nüìä RESUMEN DE REPARACI√ìN" -ForegroundColor Cyan
Write-Host "=" * 60

if ($problematicFiles.Count -eq 0) {
    Write-Host "‚úÖ Archivos Markdown: SIN PROBLEMAS" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  Archivos con problemas: $($problematicFiles.Count)" -ForegroundColor Yellow
}

if ($missingFiles.Count -eq 0) {
    Write-Host "‚úÖ Estructura de archivos: COMPLETA" -ForegroundColor Green
} else {
    Write-Host "‚ùå Archivos faltantes: $($missingFiles.Count)" -ForegroundColor Red
}

Write-Host "`nüéØ COMANDOS DE VERIFICACI√ìN:" -ForegroundColor Cyan
Write-Host "‚Ä¢ Probar sistema:     npm run comercial" -ForegroundColor White
Write-Host "‚Ä¢ Solo testing:       npm run test-comercial" -ForegroundColor White
Write-Host "‚Ä¢ P√°gina principal:   npm start" -ForegroundColor White

Write-Host "`nüöÄ ESTADO DEL PROYECTO:" -ForegroundColor Cyan
if ($problematicFiles.Count -eq 0 -and $missingFiles.Count -eq 0) {
    Write-Host "üü¢ COMPLETAMENTE FUNCIONAL - Listo para usar" -ForegroundColor Green
} elseif ($missingFiles.Count -eq 0) {
    Write-Host "üü° FUNCIONAL CON ADVERTENCIAS - Revisar archivos markdown" -ForegroundColor Yellow
} else {
    Write-Host "üî¥ REQUIERE ATENCI√ìN - Archivos faltantes cr√≠ticos" -ForegroundColor Red
}

Write-Host "`n‚úÖ REPARACI√ìN COMPLETADA" -ForegroundColor Green
